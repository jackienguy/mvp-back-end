  cursor.execute("INSERT INTO jobs(user_id, working_title, organization_name, location, ft_status, perm_status, salary_range, duration, closing_date, created_at, about, responsibilities, qualifications, recruiter_name, recruiter_title, recruiter_email, recruiter_phone_number) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", [recruiter_id, working_title, organization_name, location, ft_status, perm_status, salary_range, duration, closing_date, created_at, about, responsibilities, qualifications, recruiter_name, recruiter_title, recruiter_email, recruiter_phone_number])



   
                conn.commit()
                education = {
                "userId": user_id,
                "certificateName": result[1],
                "major": result[2],
                "institutionName": result[3],
                "completionDate": result[4],
                "location": result[5],
                "other": result[6]            
                }
              
           
                cursor.execute("INSERT INTO skills(user_id, skill_type, proficiency_level) VALUES(?,?,?)", \ [user_id, skill_type, proficiency_level,])
                skills = {
                "userId": user_id,
                "skillType": result[1],
                "proficiencyLevel": result[2],           
                }
                return Response (json.dumps(skills),
                                mimetype="application/json",
                                status=201)
            if experience:
                cursor.execute("INSERT INTO work_experience(user_id, working_title, start_date, end_date, company_name, work_location, description) VALUES(?,?,?,?,?,?,?)",[user_id, working_title, company_name, work_location, start_date, end_date, description])
                experience = {
                "userId": user_id,
                "workintTitle": result[1],
                "startDate": result[2],
                "endDate": result[3],
                "companyName": result[4],
                "workLocation": result[5],
                "description": result[6]            
                }
                return Response (json.dumps(experience),
                                mimetype="application/json",
                                status=201)



  
@app.route('/api/applicants', methods=['GET'])
def applicants():
    if (request.method == 'GET'):
        cursor = None
        conn = None
        login_token = request.headers.get('loginToken')
        job_id = request.args.get('jobId')
        
        try:
            (conn, cursor) = dbConnection()
            cursor.execute("SELECT user_id, login_token, role FROM user_session INNER JOIN users ON users.id = user_session.user_id WHERE login_token=?", [login_token,])
            user = cursor.fetchone()
            if user[3] == "recruiter":
                cursor.execute("SELECT applicant_id, job_id from application INNER JOIN jobs on jobs.id = application.job_id INNER JOIN users ON jobs.recruiter_id = users.id WHERE job_id=?",[job_id,])
                result = cursor.fetchall()
                if cursor.rowcount > 0:
                    applicant_list = []
                    for applicant in result:
                        applicants = {
                            "jobId": result[0],
                            "applicantId": result[1],
                            "firstName": result[5],
                            "lastName": result[6] 
                        }
                        applicant_list.append(applicants)
                return Response(json.dumps(applicant_list),
                                mimetype="application/json",
                                status=200)
        except mariadb.DataError as e:
            print(e)
        except mariadb.OperationalError as e:
            print(e)
        except mariadb.ProgrammingError as e:
            print(e)
        except mariadb.IntegrityError as e:
            print(e)
        except:
            print("Something went wrong")

        finally:
            if (cursor != None):
                cursor.close()
            if (conn != None):
                conn.rollback()
                conn.close()
            else:
                print("Failed to read data")

        return Response("Error something went wrong",
                        mimetype="text/plain",
                        status=500)
        